<%
=begin
This is a modal that is rendered when the user tries to create
a store that exists in the database, but does not exist in the
user's list of stores in their profile. The modal gives them
the option to add the store to their profile or cancel try again.
=end
%>
<% if !user_store.user_store_exists? && user_store.store.non_unique_store? %>
  <% form_id = "link_user_store" %>
  <%= simple_form_for(user_store, html: { id: form_id }, url: link_user_store_path) do |f| %>
    <%= render partial: "shared/modal",
        locals: {
          data_controller: "new-user-store-modal",
          form_id: form_id,
          modal_id: "modal",
          text: {
            title: user_store.store_already_exists_modal[:title],
            body: user_store.store_already_exists_modal[:body],
            primary_button: user_store.store_already_exists_modal[:primary_button],
            secondary_button: user_store.store_already_exists_modal[:secondary_button],
          },
          hidden: {
            "data-new-user-store-modal-store-id": user_store.store.non_unique_store_id,
          }
        }
    %>
    <%= f.simple_fields_for :store do |store_form| %>
      <%= store_form.input :id,
                      as: :hidden,
                      input_html: {
                        value: user_store.store.non_unique_store_id
                      }
      %>
    <% end %>
  <% end %>
<% end %>

<div data-controller="zip-code">
  <main class="form form-user-store">
    <%= simple_form_for(user_store, url: user_stores_path, wrapper: :horizontal_form) do |f| %>
      <div class="h1 mb-3 fw-normal">
        <i class="bi <%= header_icon %>"></i>
        <%= header_text %>
      </div>

      <% if f.object.errors[:base].present? %>
        <%= render partial: "shared/flash_message",
                    locals: {
                      flash_type: "alert",
                      flash_message: f.object.errors[:base].to_sentence
                    }
        %>
      <% end %>

      <%= f.simple_fields_for :store do |store_form| %>
        <% if store_form.object.errors[:base].present? %>
          <%= render partial: "shared/flash_message",
                        locals: {
                          flash_type: "alert",
                          flash_message: store_form.object.errors[:base].to_sentence
                        }
          %>
        <% end %>

        <%= store_form.input :store_name,
                    label: "Name",
                    autofocus: true
        %>
        <%= store_form.input :address,
                    label: "Address"
        %>
        <%= store_form.input :address2,
                    label: "Address 2"
        %>
        <%= store_form.input :zip_code,
                    required: true,
                    input_html: {
                      data: {
                        "zip-code-target": "zipCode",
                        action: "blur->zip-code#fetchCityAndStateFromZipCode"
                      }
                    }
        %>
        <%= store_form.input :city,
                    input_html: {
                      data: {
                        "zip-code-target": "city"
                      }
                    }
        %>
        <%= store_form.association :state,
                          wrapper: :horizontal_form,
                          label_method: lambda { |state|
                            "#{state.state_name} (#{state.postal_abbreviation})"
                          },
                          prompt: "Select a state",
                          input_html: {
                            data: {
                              "zip-code-target": "state"
                            }
                          }
        %>
      <% end %>
      <div class="form-actions">
        <%= f.button :submit,
                    "Create store",
                     class: "btn btn-primary",
                     data: {
                      "zip-code-target": "submitButton"
                     }
        %>

        <div class="help-links marginized">
          <%= link_to "Back", back_path %>
        </div>
      </div>
    <% end %>
  </main>
</div>
